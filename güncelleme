
TRAFIK SUNUCUSUNA GÜNCELLEME İŞLEMİ : 

1- Arkadaşların githubda dev branchine atmış olduğu commitler master branchine merge edilir.


2- Alınan merge jenkins tarafında derlenir. İşlemlerin başarılı olması ve versiyon numaralarının dockerhub’daki ile uyuşması gerekmektedir.





3- Merge edildikten sonra dockerhub’da versiyonların sorunsuz geçip geçmediği kontrol edilir.




4-Dockerhub’daki versiyonlar uyuşuyorsa sunucuya girilir.(ssh ile)


5-yedek almak için sunucundaki gerekli database container'ı durdurulur(docker stop $container_name). Sonrasında dataların bulunduğu ilgili dizine gidilir. Bu dizinde container’ın backup’ı alınır ve yeniden başlatılır. 

	NOT:  ilgili dizin bilinmiyor ise docker inspect $container_name komutu ile mount edilen dizin 
	bulunabilir.

docker ps (database’in sunucuda varlığı kontrol edilir.) 
docker stop $container_name
sudo cp -r .""/media/data/$container_name(yedeği alınacak container'ın konumu)""   ""/media/data/$container_name_$DATE(alınan yedeğin yeni bir isimle kopyalanacağı konum)""
docker start $container_name

6- yml dosyasının olduğu sunucundaki dizinine girilir. Containerlerın komut ile durdurulur.İçerisindeki docker-compose.yml dosyasında versiyon değişikliği yapılır. (Dockerhuba gelmiş olan en son versiyon). Sonrasında containerların çalışması için komut ile tekrar ayağa kaldırılır.

docker-compose -f docker-compose.yml down 
nano docker-compose.yml
docker-compose -f docker-compose.yml up -d
docker ps (kontrol edilebilir.)

	




ELASTIC SEARCH STORAGE LIMIT ERROR :

Sunucuda bulunan elastic search’deki memory hatası sunucudaki dolu alanın %90 üzerine çıkması üzerinden kaynaklanıyor olabilir. Bunun nedeni elastic search container’larının içindeki logların şişmesinden dolayıdır. Bunun için docker sisteminin temizlenmesi gerekmektedir.

	-  docker system prune -a  (Sonrasında ‘yes’ denilerek onaylanır ve sistem temizlenir.)

	NOT: Bu işlem yapılırken işinize yarayacak ve kullanıyor olan containerların stop olmadığına emin 
	olmanız gerekmektedir. Aksi takdirde çalışmayan containerlar ve bağlı olduğu overlay networkleri 
	vs. de gidecektir.



GEOSERVER ILE ALAKALI ISLEMLER (KONTROL): 

1-) Geoserver’ın database ile entegrasyonu için ilk önce workspace(çalışma alanı) oluşturulur. Her uygulamanın kendi ismine göre oluşturulabilir.



2-) Sonraki adımda ise geoserver’ımızı database’e bağlamak için depolar kısmında connection sağlanmalıdır. Değiştirilmesi gereken kritik olan kısım kırmızı çerçeve ile işaretlenmiştir. Olası hatalarda buralar sunucu tarafındaki değerler ile uyuşup uyuşmadığı kontrol edilebilir.


3-) Bu kısım layer priew(Katman önizleme) yaparken stillerin görünmesini ve kendi içinde gerekli configürasyonların yapılmasını sağlar.



4-) Geoserver kullanıcı ve şifresinin sunucu tarafındaki backendin içerisindeki .environmentlar ile aynı olması gerekmektedir. Bunun için geoserver içerisindeki user’ın şifresini değiştirilebilir. Bunu yapmak için aşağıdaki adımlardan şifre değişikliği yapılabilir.





____________________________________________________________________________________

			TRAFIK UYGULAMA AYAĞA KALDIRMA ADIMLARI


1-) Sistem gereksinimleri karşılanmalı (Ram,Storage,Processor,Ubuntu System vb.)


2-) İçerisini update ettikten sonra docker, docker-compose, nginx yüklenmelidir.


sudo apt-get install docker.io
sudo apt-get update
sudo apt-get upgrade -y
sudo apt-get install docker.io
sudo apt-get install docker-compose
sudo apt-get install nginx

3-) Uygulamalar indikten sonra user docker’ı göremiyor olabilir bunun için aşağıdaki komutlar girilir. Eğer docker komutları çalışıyor ise bu adımı es geçebilirsiniz.

sudo groupadd docker
sudo usermod -aG docker ${USER}
su - ${USER}


4-) Docker çalıştıktan sonra swarm networkü oluşturulması gerekmektedir. Bunun için aşağıdaki komut ile bir network oluşturulur.

docker swarm init
5- ) Networkümüz hazır olduğunda uygulamanın imajlarını çekmek gerekmektedir. Bunun için docker-compose.yml dosyasındaki imajları indiriyoruz.(Dockerhubda projenin en son imajı çalışıyorsa indirip kurabilirsiniz.)
		Example:
docker pull  geoanka/trafik-frontend-dev:Dev_${LAST_BUILD_ID}
6-) .yml dosyalarımızı çalıştırabiliriz. Bunun için   “ /home/elasmap/Desktop/trafik/ ”    dizini içerisindeki 3 adet file bulunmaktadır. Bu dosyaların konfigürasyonları gerçekleştirildikten sonra sırası ile çalışıtırılmalıdır. 

		
	NOT: Uygulama ayağa kaldırılırken dosyaların içerisindeki gereksinimleri karşılanmalı :
		- İmajlar çekilmiş olmalı
		- Volumeleri verilmeli
		- Environmentları girilmeli
		- Dışarıya açılması için portlar girilmiş olmalı
		- Kırmızılar uygulamanın kendileri
		- Sarılar uygulamanın gereksinimleri. Her uygulamanın kendi gereksinimleri farklıdır. 
		Kontrol edilmeli
		
	
		
		Gereksinimler karşılandıktan sonra aşağıdaki komutlar girilir.

		- docker stack deploy -f docker-compose.yml trafik
		- docker compose -f docker-compose-elastic.yml up -d
		- sh trafik-backend.sh
Sunucudaki ayakta olan uygulamaları kontrol etmek için de aşağıdaki komutlar girilir.

		- docker service ls	→ Ayakta olan servisleri gösterir.	(trafik)
		- docker ps			→ Ayakta olan containerları gösterir (elastic)



	7-) Sonrasında NGINX te dışarıya açılması için gerekli adımlar sağlanır. Aşağıdaki şekilde NGINX konfigürasyonları  “/etc/nginx/sites-enable/trafik.simurgbilisim.com” dosyasının içerisinde barındırılır. Gerekli ayarlar yapıldıktan sonra aşağıdaki komutlar girilir. 

		- sudo nginx -t
		- sudo nginx -s reload
	
	NOT:  -  Her bir servis, dış portuna göre yönlendirme yapılmaldır. NGINX dosyasındaki 
		  konfigürasyonlarda buna dikkat edilmeli
		- Dış sunucumuzda (devsunuser@192.168.20.180) da uygulamanın sunucusuna 
		  yönlendirilen bir konfigürasyon vardır. Bunun da yapılmış olmasına dikkat edilmeli.
		→ 180 SUNUCUSUNDAKI NGINX
	→ UYGULAMANIN SUNUCUSUNDAKI













